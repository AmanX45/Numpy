**Overview: Normal Distribution, Random Permutations, and Seaborn**

### 1. Normal Distribution

The **Normal Distribution**, also known as the Gaussian distribution, is a continuous probability distribution that is symmetrical around the mean. It is characterized by its bell-shaped curve. Most of the data values lie around the mean, with fewer values appearing as you move away.

#### Key Characteristics:
- Mean (μ): The center of the distribution.
- Standard Deviation (σ): Controls the spread or width of the distribution.
- 68-95-99.7 Rule: ~68% of data falls within 1σ, ~95% within 2σ, and ~99.7% within 3σ.

#### Syntax (Using NumPy and Matplotlib):
```python
import numpy as np
import matplotlib.pyplot as plt

# Generate data for a normal distribution
mean = 0
std_dev = 1
size = 1000

data = np.random.normal(mean, std_dev, size)

# Plot the distribution
plt.hist(data, bins=30, density=True, alpha=0.6, color='b')
plt.title('Normal Distribution')
plt.xlabel('Value')
plt.ylabel('Density')
plt.show()
```

### 2. Random Permutations

**Random Permutations** involve rearranging a sequence or array into a random order. This is useful for shuffling data, resampling, or generating randomized test cases.

#### Syntax (Using NumPy):
```python
import numpy as np

# Original array
arr = np.array([1, 2, 3, 4, 5])

# Generate a random permutation
shuffled = np.random.permutation(arr)
print("Original array:", arr)
print("Shuffled array:", shuffled)
```

#### Notes:
- The original array remains unchanged.
- The output is a new array with randomly permuted elements.

### 3. Seaborn

**Seaborn** is a Python visualization library built on top of Matplotlib. It provides an interface for creating attractive and informative statistical graphics.

#### Key Features:
- Built-in themes for styling.
- Functions to visualize univariate and bivariate distributions.
- High-level functions for complex visualizations.

#### Common Plots and Syntax:

**3.1 Distribution Plot (distplot):**
```python
import seaborn as sns
import matplotlib.pyplot as plt

# Generate random data
data = np.random.normal(0, 1, 1000)

# Create a distribution plot
sns.histplot(data, kde=True, color='blue')
plt.title('Distribution Plot')
plt.show()
```

**3.2 Pair Plot:**
Used to visualize pairwise relationships in a dataset.
```python
import seaborn as sns

# Load example dataset
data = sns.load_dataset("iris")

# Pair plot
sns.pairplot(data, hue='species')
plt.show()
```

**3.3 Box Plot:**
Useful for visualizing the distribution and identifying outliers.
```python
sns.boxplot(x='species', y='sepal_length', data=data)
plt.title('Box Plot')
plt.show()
```

### Interview Questions

#### Normal Distribution:
1. What is the 68-95-99.7 rule in a normal distribution?
2. How can you generate data for a normal distribution in Python?
3. Why is the normal distribution important in statistics and machine learning?

#### Random Permutations:
1. What is the difference between `np.random.shuffle` and `np.random.permutation`?
2. How can random permutations be useful in machine learning?
3. What happens if you apply a permutation on a multidimensional array?

#### Seaborn:
1. How is Seaborn different from Matplotlib?
2. What is the purpose of the `hue` parameter in Seaborn plots?
3. How would you create a heatmap to visualize correlations in a dataset?

